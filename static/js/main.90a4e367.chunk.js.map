{"version":3,"sources":["types.ts","utils/constants.ts","utils/positions.ts","utils/apples.ts","store/model/index.ts","store/model/game.ts","utils/snake.ts","store/index.ts","store/hooks.ts","components/Tile.tsx","components/Column.tsx","components/Grid.tsx","store/game.ts","pages/Game.tsx","Root.tsx","serviceWorker.ts","index.tsx"],"names":["DIRECTION","MAP_POSITION","RIGHT","x","y","LEFT","UP","DOWN","moveToDirection","direction","pos","VERTICAL_DIRECTIONS","HORIZONTAL_DIRECTIONS","isOpossiteForVertical","R","isOpossiteForHorizontal","getRandomNumber","minimum","maximum","min","Math","ceil","max","floor","random","getRandomPosition","GRID_WIDTH","GRID_HEIGHT","isPositionEqual","p1","p2","createApple","omitPositions","apple","initialSnake","length","snake","i","push","generateSnake","initialApples","count","apples","toOmit","generateApples","game","setSnake","action","state","setApples","model","store","createStore","createTypedHooks","useStoreActions","useStoreState","useStoreDispatch","Tile","styled","div","props","isHead","isActive","isApple","tiles","Array","Column","indexColumn","map","_","indexRow","rows","Grid","GridContainer","tileWidth","index","keys$","fromEvent","document","pipe","pluck","MAP_DIRECTION","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","length$","BehaviorSubject","nextDirection","prevDirection","newDirection","snakeLength$","scan","step","snakeLength","share","direction$","key","filter","startWith","distinctUntilChanged","snake$","switchMap","interval","withLatestFrom","lastDirection","move","head","tail","lastPosition","newPosition","apples$","eaten","find","a","withoutEaten","skip","tap","next","POINTS_PER_APPLE","subscribe","score$","score","scene$","combineLatest","game$","of","animationFrameScheduler","fps$","scene","takeWhile","isGameOver","isOverGrid","some","p","Game","useState","setScore","useEffect","sub","unsubscribe","Root","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.90a4e367.chunk.js","sourcesContent":["export enum DIRECTION {\n  RIGHT = 'RIGHT',\n  LEFT = 'LEFT',\n  UP = 'UP',\n  DOWN = 'DOWN',\n}\nexport type Position = { x: number; y: number };\n","export const GRID_WIDTH = 15;\nexport const GRID_HEIGHT = 15;\nexport const SNAKE_LENGTH = 3;\nexport const APPLE_COUNT = 2;\n","import * as R from 'ramda';\nimport { Position, DIRECTION } from '../types';\nimport { GRID_HEIGHT, GRID_WIDTH } from './constants';\n\nexport const positionZero: Position = { x: 0, y: 0 };\nexport const moveToDown = ({ x, y }: Position): Position => ({ x, y: y + 1 });\nexport const moveToUp = ({ x, y }: Position): Position => ({ x, y: y - 1 });\nexport const moveToLeft = ({ x, y }: Position): Position => ({ x: x - 1, y });\nexport const moveToRight = ({ x, y }: Position): Position => ({ x: x + 1, y });\n\nconst MAP_POSITION: Record<DIRECTION, (pos: Position) => Position> = {\n  [DIRECTION.RIGHT]: moveToRight,\n  [DIRECTION.LEFT]: moveToLeft,\n  [DIRECTION.UP]: moveToUp,\n  [DIRECTION.DOWN]: moveToDown,\n};\n\nexport const moveToDirection = ({\n  direction,\n  pos,\n}: {\n  direction: DIRECTION;\n  pos: Position;\n}): Position => MAP_POSITION[direction](pos);\n\nconst VERTICAL_DIRECTIONS = [DIRECTION.UP, DIRECTION.DOWN];\nconst HORIZONTAL_DIRECTIONS = [DIRECTION.LEFT, DIRECTION.RIGHT];\nexport const isOpossiteForVertical = R.compose(\n  R.equals(0),\n  R.length,\n  R.without(HORIZONTAL_DIRECTIONS),\n);\nexport const isOpossiteForHorizontal = R.compose(\n  R.equals(0),\n  R.length,\n  R.without(VERTICAL_DIRECTIONS),\n);\n\nexport const isOpposite = (direction: DIRECTION, newDirection: DIRECTION) =>\n  R.either(\n    isOpossiteForVertical,\n    isOpossiteForHorizontal,\n  )([direction, newDirection]);\n\nconst getRandomNumber = (minimum: number, maximum: number) => {\n  const min = Math.ceil(minimum);\n  const max = Math.floor(maximum);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nexport const getRandomPosition = (): Position => ({\n  x: getRandomNumber(0, GRID_WIDTH - 1),\n  y: getRandomNumber(0, GRID_HEIGHT - 1),\n});\n\nexport const isPositionEqual = (p1: Position, p2: Position) =>\n  p1.x === p2.x && p1.y === p2.y;\n","import { Position } from '../types';\nimport { getRandomPosition } from './positions';\nimport * as R from 'ramda';\n\nexport function createApple(omitPositions: Position[]) {\n  let apple = getRandomPosition();\n  while (R.includes(apple, omitPositions)) {\n    apple = getRandomPosition();\n  }\n  return apple;\n}\n\nexport const generateApples = (count: number, omitPositions: Position[]) => {\n  const apples = [];\n  const toOmit = [...omitPositions];\n  for (let i = 0; i < count; i++) {\n    const apple = createApple(toOmit);\n    apples.push(apple);\n    toOmit.push(apple);\n  }\n\n  return apples;\n};\n","import { game, GameModel } from './game';\n\nexport enum DIRECTION {\n  RIGHT = 'RIGHT',\n  LEFT = 'LEFT',\n  UP = 'UP',\n  DOWN = 'DOWN',\n}\n\nexport interface StoreModel {\n  game: GameModel;\n}\n\nexport const model: StoreModel = {\n  game,\n};\n","import { action, Action } from 'easy-peasy';\nimport { Position } from '../../types';\nimport { generateSnake } from '../../utils/snake';\nimport { generateApples } from '../../utils/apples';\n\nimport { SNAKE_LENGTH, APPLE_COUNT } from '../../utils/constants';\n\nexport const initialSnake = generateSnake(SNAKE_LENGTH);\nexport const initialApples = generateApples(APPLE_COUNT, initialSnake);\n\nexport interface GameModel {\n  snake?: Position[];\n  setSnake: Action<GameModel, Position[]>;\n  apples: Position[];\n  setApples: Action<GameModel, Position[]>;\n}\n\nexport const game: GameModel = {\n  snake: initialSnake,\n  setSnake: action((state, snake) => {\n    state.snake = snake;\n  }),\n  apples: initialApples,\n  setApples: action((state, apples) => {\n    state.apples = apples;\n  }),\n};\n","import { Position } from '../types';\n\nexport const generateSnake = (length: number) => {\n  let snake: Position[] = [];\n\n  for (let i = length - 1; i >= 0; i--) {\n    snake.push({ x: i, y: 0 });\n  }\n\n  return snake;\n};\n","import { createStore } from 'easy-peasy';\nimport { model } from './model';\n\nexport const store = createStore(model);\n","import { createTypedHooks } from 'easy-peasy';\nimport { StoreModel } from './model';\n\nconst { useStoreActions, useStoreState, useStoreDispatch } =\n  createTypedHooks<StoreModel>();\n\nexport { useStoreActions, useStoreState, useStoreDispatch };\n","import styled from '@emotion/styled';\n\ntype Props = {\n  isActive: boolean;\n  isHead: boolean;\n  isApple: boolean;\n};\nexport const Tile = styled.div<Props>`\n  width: 10px;\n  height: 10px;\n  border: 1px solid rgba(0, 0, 0, 0.1);\n  margin: 1px;\n  background-color: ${(props) =>\n    props.isHead\n      ? 'green'\n      : props.isActive\n      ? 'red'\n      : props.isApple\n      ? 'blue'\n      : 'transparent'};\n`;\n","import React from 'react';\nimport * as R from 'ramda';\nimport { GRID_WIDTH } from '../utils/constants';\nimport { useStoreState } from '../store/hooks';\nimport { Tile } from './Tile';\n\nconst tiles = [...Array(GRID_WIDTH)];\ntype Props = {\n  indexColumn: number;\n};\n\nexport const Column: React.FC<Props> = ({ indexColumn }) => {\n  const snake = useStoreState((store) => store.game.snake);\n  const apples = useStoreState((store) => store.game.apples);\n\n  if (!snake) {\n    return null;\n  }\n\n  return (\n    <div>\n      {tiles.map((_, indexRow) => {\n        return (\n          <Tile\n            key={indexRow}\n            isActive={R.includes({ x: indexColumn, y: indexRow }, snake)}\n            isApple={R.includes({ x: indexColumn, y: indexRow }, apples)}\n            isHead={snake[0].x === indexColumn && snake[0].y === indexRow}\n          />\n        );\n      })}\n    </div>\n  );\n};\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport { GRID_HEIGHT, GRID_WIDTH } from '../utils/constants';\nimport { Column } from './Column';\n\ntype Props = {\n  tileWidth: number;\n};\n\nconst rows = [...Array(GRID_HEIGHT)];\nexport const Grid: React.FC = () => (\n  <GridContainer tileWidth={10}>\n    {rows.map((_, index) => (\n      <Column key={index} indexColumn={index}></Column>\n    ))}\n  </GridContainer>\n);\n\nconst GridContainer = styled.div<Props>`\n  display: flex;\n  max-width: ${(props) => (props.tileWidth + 2 + 2) * GRID_WIDTH}px;\n  max-height: ${(props) => (props.tileWidth + 2 + 2) * GRID_HEIGHT}px;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n`;\n","import {\n  interval,\n  of,\n  fromEvent,\n  BehaviorSubject,\n  animationFrameScheduler,\n  combineLatest,\n} from 'rxjs';\nimport {\n  pluck,\n  scan,\n  map,\n  switchMap,\n  withLatestFrom,\n  filter,\n  startWith,\n  distinctUntilChanged,\n  share,\n  takeWhile,\n  skip,\n  tap,\n} from 'rxjs/operators';\nimport { DIRECTION } from './model';\nimport { initialApples, initialSnake } from './model/game';\nimport {\n  moveToDirection,\n  isOpposite,\n  isPositionEqual,\n} from '../utils/positions';\nimport { Position } from '../types';\nimport { GRID_HEIGHT, GRID_WIDTH, SNAKE_LENGTH } from '../utils/constants';\nimport { createApple } from '../utils/apples';\nimport * as R from 'ramda';\n\nconst keys$ = fromEvent<KeyboardEvent>(document, 'keydown').pipe(pluck('code'));\nconst MAP_DIRECTION: Record<string, DIRECTION> = {\n  ArrowUp: DIRECTION.UP,\n  ArrowDown: DIRECTION.DOWN,\n  ArrowLeft: DIRECTION.LEFT,\n  ArrowRight: DIRECTION.RIGHT,\n};\nconst length$ = new BehaviorSubject<number>(SNAKE_LENGTH);\n\nconst nextDirection = (prevDirection: DIRECTION, nextDirection: DIRECTION) =>\n  isOpposite(prevDirection, nextDirection) ? prevDirection : nextDirection;\n\nconst snakeLength$ = length$.pipe(\n  scan((step, snakeLength) => snakeLength + step),\n  share(),\n);\nconst direction$ = keys$.pipe(\n  map((key) => MAP_DIRECTION[key]),\n  filter((direction) => !!direction),\n  startWith(DIRECTION.RIGHT),\n  distinctUntilChanged(),\n);\n\nconst gameSpeed$ = new BehaviorSubject(200);\n\n// TEST for speed up\n// let increment = 1;\n// setInterval(() => {\n//   increment += 1;\n//   gameSpeed$.next(200 / increment);\n// }, 3000);\n\nconst move$ = gameSpeed$.pipe(\n  switchMap((i) =>\n    interval(i).pipe(\n      withLatestFrom(direction$, (_, direction) => ({\n        direction,\n      })),\n      scan(\n        (lastDirection, { direction }): DIRECTION =>\n          nextDirection(lastDirection, direction),\n        DIRECTION.RIGHT,\n      ),\n    ),\n  ),\n);\n\nconst moveSnake = (\n  snake: Position[],\n  { move, snakeLength }: { move: DIRECTION; snakeLength: number },\n): Position[] => {\n  const [head, ...tail] = snake;\n  let lastPosition = head;\n\n  return [\n    moveToDirection({ direction: move, pos: head }),\n    ...tail.map<Position>((pos) => {\n      const newPosition = { ...lastPosition };\n      lastPosition = pos;\n      return newPosition;\n    }),\n    ...(snakeLength > snake.length ? [snake[snake.length - 1]] : []),\n  ];\n};\n\nconst snake$ = move$.pipe(\n  withLatestFrom(snakeLength$, (move, snakeLength) => ({\n    move,\n    snakeLength,\n  })),\n  scan(moveSnake, initialSnake),\n  share(),\n);\n\nconst eat = (apples: Position[], snake: Position[]) => {\n  const [head] = snake;\n  const eaten = apples.find((a) => isPositionEqual(a, head));\n  if (eaten) {\n    const withoutEaten = R.without([eaten], apples);\n    return [...withoutEaten, createApple([...withoutEaten, ...snake])];\n  }\n  return apples;\n};\n\nconst apples$ = snake$.pipe(\n  scan(eat, initialApples),\n  distinctUntilChanged(),\n  share(),\n);\n\napples$\n  .pipe(\n    skip(1),\n    tap(() => length$.next(POINTS_PER_APPLE)),\n  )\n  .subscribe();\n\nconst POINTS_PER_APPLE = 1;\nconst score$ = snakeLength$.pipe(\n  startWith(0),\n  scan((score, _) => score + POINTS_PER_APPLE),\n);\nexport type Scene = {\n  snake: Position[];\n  apples: Position[];\n  score: number;\n};\n\nconst scene$ = combineLatest([snake$, apples$, score$]).pipe<Scene>(\n  map(([snake, apples, score]) => ({ snake, apples, score })),\n);\n\nconst FPS = 60;\nexport const game$ = of('Start Game').pipe(\n  map(() => interval(1000 / FPS, animationFrameScheduler)),\n  switchMap((fps$) => fps$.pipe(withLatestFrom(scene$, (_, scene) => scene))),\n  takeWhile((scene) => !isGameOver(scene)),\n);\n\nconst isOverGrid = ({ x, y }: Position) =>\n  x >= GRID_WIDTH || x < 0 || y >= GRID_HEIGHT || y < 0;\n\nconst isGameOver = (scene: Scene) => {\n  const { snake } = scene;\n  const [head, ...tail] = snake;\n  return isOverGrid(head) || tail.some((p) => isPositionEqual(p, head));\n};\n","import React, { useEffect, useState } from 'react';\nimport { useStoreActions } from '../store/hooks';\nimport { Grid } from '../components/Grid';\nimport { game$ } from '../store/game';\n\nexport const Game: React.FC = () => {\n  const { setSnake, setApples } = useStoreActions((store) => ({\n    setSnake: store.game.setSnake,\n    setApples: store.game.setApples,\n  }));\n  const [score, setScore] = useState(0);\n\n  useEffect(() => {\n    const sub = game$.subscribe((scene) => {\n      setSnake(scene.snake);\n      setApples(scene.apples);\n      setScore(scene.score);\n    });\n    return () => sub.unsubscribe();\n  }, [setSnake, setApples, setScore]);\n\n  return (\n    <>\n      <h1>Snake</h1>\n      Score: {score}\n      <Grid />\n    </>\n  );\n};\n","import React from 'react';\nimport { StoreProvider } from 'easy-peasy';\nimport { store } from './store';\nimport { Game } from './pages/Game';\n\nconst Root: React.FC = () => (\n  <StoreProvider store={store}>\n    <Game />\n  </StoreProvider>\n);\n\nexport default Root;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from './Root';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}